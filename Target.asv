classdef Target < handle
    properties
        index           % Unique identifier
        position        % [x,y] coordinates
        residingAgents  % List of agents currently at this target (IDs)
        recentArrivals  % Agent IDs arrived since last reset
        arrivalTimes    % All arrival timestamps
        departureTimes  % All departure timestamps
        color           % Display color
        markerSize      % Size of the target marker
        graphicHandle   % Plot circle
        labelHandle     % Text label
        RHandle         % Uncertainty halo
        R               % Uncertainty state
        A               % Growth rate parameter
        B = 2         % Decay rate parameter    
    end

    properties (Access = private)
        prevAgentIDs    % Agent IDs from previous timestep
    end

    methods
        function obj = Target(index, position)
            obj.index = index;
            obj.position = position;
            obj.residingAgents = [];
            obj.recentArrivals = [];
            obj.arrivalTimes = [];
            obj.departureTimes = [];
            obj.color = 'b';
            obj.markerSize = 8;
            obj.graphicHandle = [];
            obj.labelHandle = [];
            obj.R = 0; 
            obj.A = 0.5 + (obj.B - 0.5) * rand();
            obj.prevAgentIDs = [];
        end

        function draw(obj, ax)
            r = max(2, sqrt(obj.R)*3);
            theta = linspace(0, 2*pi, 100);
            x_circle = obj.position(1) + r * cos(theta);
            y_circle = obj.position(2) + r * sin(theta);
            obj.RHandle = patch(ax, x_circle, y_circle, 'y', ...
                'EdgeColor', 'none', ...
                'FaceAlpha', 0.5, ...
                'HandleVisibility', 'off');
            uistack(obj.RHandle, 'bottom');
            obj.graphicHandle = plot(ax, obj.position(1), obj.position(2), 'o', ...
                'MarkerSize', obj.markerSize, ...
                'MarkerFaceColor', obj.color, ...
                'MarkerEdgeColor', 'k');
            obj.labelHandle = text(ax, obj.position(1), obj.position(2)-0.04, ...
                num2str(obj.index), ...
                'Color', obj.color, ...
                'FontSize', 10, ...
                'HorizontalAlignment', 'center');
        end

        function updateUncertainty(obj, dt)
            
            Ni = length(obj.residingAgents);

            vi = double(obj.R > 0 || obj.A / obj.B > Ni);
            dR = (obj.A - obj.B * Ni) * vi * dt; 


            obj.R = max(0, obj.R + dR);
            if isvalid(obj.RHandle)
                r = max(2, sqrt(obj.R)*3);
                theta = linspace(0, 2*pi, 100);
                x_circle = obj.position(1) + r * cos(theta);
                y_circle = obj.position(2) + r * sin(theta);
                set(obj.RHandle, 'XData', x_circle, 'YData', y_circle);
            end
        end

        function updateResidingAgents(obj, agentList, globalTime)
            % Initialize currentIDs
            if isempty(agentList)
                currentIDs = [];
            else
                % Handle both object array and cell array of objects
                if isobject(agentList)
                    currentIDs = [agentList.index];
                elseif iscell(agentList)
                    currentIDs = cellfun(@(x) x.index, agentList);
                else
                    error('Invalid agentList type: %s', class(agentList));
                end
            end
            
            % Ensure recentArrivals is initialized as a numeric array
            if isempty(obj.recentArrivals)
                obj.recentArrivals = [];
            end
            
            % Find new arrivals and departures
            newArrivals = setdiff(currentIDs, obj.prevAgentIDs);
            departures = setdiff(obj.prevAgentIDs, currentIDs);
            
            % Log arrivals - properly handle numeric IDs
            for id = newArrivals(:)'  % Ensure row vector
                obj.arrivalTimes(end+1) = globalTime;
                obj.recentArrivals(end+1) = double(id);  % Explicit conversion
            end
            
            % Log departures
            for id = departures(:)'  % Ensure row vector
                obj.departureTimes(end+1) = globalTime;
                % Remove from recentArrivals if present
                obj.recentArrivals(obj.recentArrivals == id) = [];
            end
            
            % Reset logic if all recent arrivals have departed
            if isempty(obj.recentArrivals)
                obj.arrivalTimes = [];
                obj.departureTimes = [];
            end
            
            % Update tracking
            obj.prevAgentIDs = currentIDs;
            obj.residingAgents = agentList;
        end
    end
end
